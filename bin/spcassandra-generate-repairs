#!/usr/bin/env python
# Copyright (c) 2013-2014 Spotify AB
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
# Tool that generates repairs commands to repair an entire cluster
# using token range repairs

import sys
from cassandra.cluster import Cluster
from optparse import OptionParser

def generate_repair(options):
    cluster=Cluster([options.host])
    session=cluster.connect()

    ring = cluster.metadata.token_map.ring

    MIN_SEGMENT_SIZE = 100

    if 'RandomPartitioner' in cluster.metadata.partitioner:
        token_format = "{0:039d}"
        RANGE_MIN = 0
        RANGE_MAX = (2**127) - 1
    elif 'Murmur3Partitioner' in cluster.metadata.partitioner:
        token_format = "{0:+021d}"
        RANGE_MIN = -(2**63)
        RANGE_MAX = (2**63)-1
    else:
        sys.stderr.write('Unsupported partitioner: %s\n' % cluster.metadata.partitioner)
        sys.exit(1)

    RANGE_SIZE = RANGE_MAX - RANGE_MIN + 1

    # We split each token range into options.ranges segments.
    # Also ensure that no segment is less than MIN_SEGMENT_SIZE
    # Slightly messy since we need to support that the first
    # token may not equal RANGE_MIN

    total = 0
    for i in range(0,len(ring)):
        start = ring[i]
        stop  = ring[(i+1) % len(ring)]
        host  = cluster.metadata.token_map.token_to_host_owner[stop]
        start = start.value
        stop  = stop.value
        if stop < start:
            # Wrap around case
            stop += RANGE_SIZE

        range_length = max(MIN_SEGMENT_SIZE, (stop - start) / options.ranges + 1)
        cur = start
        cmd = "nodetool repair %s" % options.keyspace
        if options.columnfamily:
            cmd += " %s" % " ".join(options.columnfamily)
        if options.snapshot:
            cmd += " -snapshot"
        if options.parallel:
            cmd += " -par"
        if options.dcparallel:
            cmd += " -dcpar"
        if options.local:
            cmd += " -local"
        while cur < stop:
            next = min(stop, cur + range_length)
            ocur = cur
            onext = next
            if onext > RANGE_MAX:
                onext -= RANGE_SIZE
            if ocur > RANGE_MAX:
                ocur -= RANGE_SIZE
            # Repair between tokens 'ocur' and 'onext' using 'host' as coordinator
            print "%s -st %s -et %s -h %s" % (cmd, token_format.format(ocur), token_format.format(onext), host)
            total += next - cur
            cur = next

    if total != RANGE_SIZE:
        # Sanity check that we've generated repairs for the entire range
        print >> sys.stderr, "WARNING: Not entire range will be repaired!"

def main():
    """Validate arguments and initiate repair
    """
    parser = OptionParser()
    parser.add_option("-k", "--keyspace", dest="keyspace", metavar="KEYSPACE",
                      help="Keyspace to repair (REQUIRED)")

    parser.add_option("-c", "--columnfamily", dest="columnfamily", default=[],
                      action="append", metavar="COLUMNFAMILY",
                      help="ColumnFamily to repair, can appear multiple times")

    parser.add_option("-H", "--host", dest="host", default="localhost",
                      metavar="HOST", help="Hostname to get ring information from [default: %default]")

    parser.add_option("-r", "--ranges", dest="ranges", type="int", default=100,
                      metavar="RANGES", help="Number of discrete ranges per primary range [default: %default]")

    parser.add_option("-l", "--local", dest="local", default="",
                      action="store_const", const="-local",
                      metavar="LOCAL", help="Restrict repair to the local DC")

    parser.add_option("-s", "--snapshot", dest="snapshot", default="",
                      action="store_const", const="-snapshot",
                      metavar="SNAPSHOT", help="Use snapshot repair (default in 2.0)")

    parser.add_option("--par", dest="parallel", default="",
                      action="store_const", const="-par",
                     metavar="PARALLEL", help="Use parallel repair (default in 1.2)")

    parser.add_option("--dcpar", dest="dcparallel", default="",
                      action="store_const", const="-dcpar",
                      metavar="DCPARALLEL", help="Use dc parallel repair (available in 2.0.12)")

    (options, args) = parser.parse_args()

    # TODO: check ks
    generate_repair(options)
    exit(0)

if __name__ == "__main__":
    main()
